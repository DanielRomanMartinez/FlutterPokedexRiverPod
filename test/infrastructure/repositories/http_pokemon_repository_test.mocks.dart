// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_pokedex/test/infrastructure/repositories/http_pokemon_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i6;

import 'package:flutter_pokedex/domain/model/objects/pokemon.dart' as _i8;
import 'package:flutter_pokedex/domain/model/value_object/cached_response.dart'
    as _i2;
import 'package:flutter_pokedex/domain/model/value_object/response.dart' as _i3;
import 'package:flutter_pokedex/domain/repositories/captured_pokemon_repository.dart'
    as _i7;
import 'package:flutter_pokedex/domain/services/http_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCachedResponse_0 extends _i1.SmartFake
    implements _i2.CachedResponse {
  _FakeCachedResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i4.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.CachedResponse> get(
    Uri? url, {
    Map<String, String>? headers,
    bool? cached = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #headers: headers,
            #cached: cached,
          },
        ),
        returnValue: _i5.Future<_i2.CachedResponse>.value(_FakeCachedResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #headers: headers,
              #cached: cached,
            },
          ),
        )),
      ) as _i5.Future<_i2.CachedResponse>);

  @override
  _i5.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);
}

/// A class which mocks [CapturedPokemonsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCapturedPokemonsRepository extends _i1.Mock
    implements _i7.CapturedPokemonsRepository {
  MockCapturedPokemonsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.Pokemon>> getPokemons({String? name}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPokemons,
          [],
          {#name: name},
        ),
        returnValue: _i5.Future<List<_i8.Pokemon>>.value(<_i8.Pokemon>[]),
      ) as _i5.Future<List<_i8.Pokemon>>);

  @override
  _i5.Future<_i8.Pokemon?> getPokemon(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPokemon,
          [id],
        ),
        returnValue: _i5.Future<_i8.Pokemon?>.value(),
      ) as _i5.Future<_i8.Pokemon?>);

  @override
  _i5.Future<void> markAsCaptured(_i8.Pokemon? pokemon) => (super.noSuchMethod(
        Invocation.method(
          #markAsCaptured,
          [pokemon],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removePokemon(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removePokemon,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
