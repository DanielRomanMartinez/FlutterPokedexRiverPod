name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

jobs:
  analyze-and-test:
    name: Analyze & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.2.4'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: flutter analyze --fatal-infos

      - name: Run tests
        run: flutter test --exclude-tags=golden

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: analyze-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build web (test)
        run: flutter build web --release --dart-define=FLUTTER_WEB_AUTO_DETECT=true

      - name: Check build size
        run: |
          echo "Build size:"
          du -sh build/web/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build-pr-${{ github.event.number }}
          path: build/web/
          retention-days: 3

  comment-pr:
    name: Comment PR
    runs-on: ubuntu-latest
    needs: [analyze-and-test, build-web]
    if: always()

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('✅ Build Status')
            );
            
            const buildStatus = '${{ needs.build-web.result }}' === 'success' ? '✅ Passed' : '❌ Failed';
            const testStatus = '${{ needs.analyze-and-test.result }}' === 'success' ? '✅ Passed' : '❌ Failed';
            
            const body = `## ✅ Build Status
            
            | Check | Status |
            |-------|--------|
            | Tests & Analysis | ${testStatus} |
            | Web Build | ${buildStatus} |
            
            **PR #${{ github.event.number }}** is ready for review!
            
            ---
            *This comment was automatically generated by GitHub Actions*`;
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }